Antti Kokko (1):
      Add changes file for Qt 5.15.2

Friedemann Kleint (1):
      QSurfaceDataProxy: Fix crashes adding the first row of data

Jani Heikkinen (2):
      Bump version
      Bump version

Sami Varanka (1):
      Fix QML theme showing totally dark

Tarja Sundqvist (5):
      Update commercial license headers
      Revert "Update commercial license headers"
      Bump version
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.4' into tqtc/lts-5.15-opensource
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.5' into tqtc/lts-5.15-opensource

diff --git a/src/datavisualization/data/qsurfacedataproxy.cpp b/src/datavisualization/data/qsurfacedataproxy.cpp
index 1c61084c..d176238a 100644
--- a/src/datavisualization/data/qsurfacedataproxy.cpp
+++ b/src/datavisualization/data/qsurfacedataproxy.cpp
@@ -475,7 +475,8 @@ void QSurfaceDataProxyPrivate::setItem(int rowIndex, int columnIndex, const QSur
 
 int QSurfaceDataProxyPrivate::addRow(QSurfaceDataRow *row)
 {
-    Q_ASSERT(m_dataArray->at(0)->size() == row->size());
+    Q_ASSERT(m_dataArray->isEmpty()
+             || m_dataArray->at(0)->size() == row->size());
     int currentSize = m_dataArray->size();
     m_dataArray->append(row);
     return currentSize;
@@ -485,7 +486,8 @@ int QSurfaceDataProxyPrivate::addRows(const QSurfaceDataArray &rows)
 {
     int currentSize = m_dataArray->size();
     for (int i = 0; i < rows.size(); i++) {
-        Q_ASSERT(m_dataArray->at(0)->size() == rows.at(i)->size());
+        Q_ASSERT(m_dataArray->isEmpty()
+                 || m_dataArray->at(0)->size() == rows.at(i)->size());
         m_dataArray->append(rows.at(i));
     }
     return currentSize;
@@ -494,7 +496,8 @@ int QSurfaceDataProxyPrivate::addRows(const QSurfaceDataArray &rows)
 void QSurfaceDataProxyPrivate::insertRow(int rowIndex, QSurfaceDataRow *row)
 {
     Q_ASSERT(rowIndex >= 0 && rowIndex <= m_dataArray->size());
-    Q_ASSERT(m_dataArray->at(0)->size() == row->size());
+    Q_ASSERT(m_dataArray->isEmpty()
+             || m_dataArray->at(0)->size() == row->size());
     m_dataArray->insert(rowIndex, row);
 }
 
@@ -503,7 +506,8 @@ void QSurfaceDataProxyPrivate::insertRows(int rowIndex, const QSurfaceDataArray
     Q_ASSERT(rowIndex >= 0 && rowIndex <= m_dataArray->size());
 
     for (int i = 0; i < rows.size(); i++) {
-        Q_ASSERT(m_dataArray->at(0)->size() == rows.at(i)->size());
+        Q_ASSERT(m_dataArray->isEmpty()
+                 || m_dataArray->at(0)->size() == rows.at(i)->size());
         m_dataArray->insert(rowIndex++, rows.at(i));
     }
 }
diff --git a/src/datavisualization/theme/thememanager.cpp b/src/datavisualization/theme/thememanager.cpp
index 01c7c10b..fb06b11c 100644
--- a/src/datavisualization/theme/thememanager.cpp
+++ b/src/datavisualization/theme/thememanager.cpp
@@ -101,7 +101,8 @@ void ThemeManager::setActiveTheme(Q3DTheme *theme)
     m_activeTheme = theme;
 
     // Reset all bits to dirty for sync
-    m_activeTheme->d_ptr->resetDirtyBits();
+    if (theme->d_ptr->isForcePredefinedType())
+        m_activeTheme->d_ptr->resetDirtyBits();
 
     // Connect signals from new one
     connectThemeSignals();
diff --git a/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp b/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp
index cda6bcce..1516e67d 100644
--- a/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp
+++ b/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp
@@ -47,6 +47,7 @@ private slots:
 
     void initialProperties();
     void initializeProperties();
+    void initialRow();
 
 private:
     QSurfaceDataProxy *m_proxy;
@@ -105,5 +106,14 @@ void tst_proxy::initializeProperties()
     QCOMPARE(m_proxy->rowCount(), 2);
 }
 
+void tst_proxy::initialRow()
+{
+    QSurfaceDataProxy proxy;
+    QSurfaceDataRow row{QSurfaceDataItem{QVector3D{0, 0, 0}},
+                        QSurfaceDataItem{QVector3D{1, 1, 1}}};
+    proxy.addRow(new QSurfaceDataRow(row));
+    proxy.addRow(new QSurfaceDataRow(row));
+}
+
 QTEST_MAIN(tst_proxy)
 #include "tst_proxy.moc"
