Antti Kokko (1):
      Add changes file for Qt 5.15.2

Friedemann Kleint (1):
      QSurfaceDataProxy: Fix crashes adding the first row of data

Jani Heikkinen (2):
      Bump version
      Bump version

Sami Varanka (4):
      Fix QML theme showing totally dark
      Fix Q3DScatter memory leak
      Fix bargraph labels face wrong direction
      Fix: QAbstract3DGraph orthoProjection docs

Tarja Sundqvist (9):
      Update commercial license headers
      Revert "Update commercial license headers"
      Bump version
      Bump version
      Bump version
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.4' into tqtc/lts-5.15-opensource
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.5' into tqtc/lts-5.15-opensource
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.6' into tqtc/lts-5.15-opensource
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.7' into tqtc/lts-5.15-opensource

diff --git a/src/datavisualization/data/qsurfacedataproxy.cpp b/src/datavisualization/data/qsurfacedataproxy.cpp
index 1c61084c..d176238a 100644
--- a/src/datavisualization/data/qsurfacedataproxy.cpp
+++ b/src/datavisualization/data/qsurfacedataproxy.cpp
@@ -475,7 +475,8 @@ void QSurfaceDataProxyPrivate::setItem(int rowIndex, int columnIndex, const QSur
 
 int QSurfaceDataProxyPrivate::addRow(QSurfaceDataRow *row)
 {
-    Q_ASSERT(m_dataArray->at(0)->size() == row->size());
+    Q_ASSERT(m_dataArray->isEmpty()
+             || m_dataArray->at(0)->size() == row->size());
     int currentSize = m_dataArray->size();
     m_dataArray->append(row);
     return currentSize;
@@ -485,7 +486,8 @@ int QSurfaceDataProxyPrivate::addRows(const QSurfaceDataArray &rows)
 {
     int currentSize = m_dataArray->size();
     for (int i = 0; i < rows.size(); i++) {
-        Q_ASSERT(m_dataArray->at(0)->size() == rows.at(i)->size());
+        Q_ASSERT(m_dataArray->isEmpty()
+                 || m_dataArray->at(0)->size() == rows.at(i)->size());
         m_dataArray->append(rows.at(i));
     }
     return currentSize;
@@ -494,7 +496,8 @@ int QSurfaceDataProxyPrivate::addRows(const QSurfaceDataArray &rows)
 void QSurfaceDataProxyPrivate::insertRow(int rowIndex, QSurfaceDataRow *row)
 {
     Q_ASSERT(rowIndex >= 0 && rowIndex <= m_dataArray->size());
-    Q_ASSERT(m_dataArray->at(0)->size() == row->size());
+    Q_ASSERT(m_dataArray->isEmpty()
+             || m_dataArray->at(0)->size() == row->size());
     m_dataArray->insert(rowIndex, row);
 }
 
@@ -503,7 +506,8 @@ void QSurfaceDataProxyPrivate::insertRows(int rowIndex, const QSurfaceDataArray
     Q_ASSERT(rowIndex >= 0 && rowIndex <= m_dataArray->size());
 
     for (int i = 0; i < rows.size(); i++) {
-        Q_ASSERT(m_dataArray->at(0)->size() == rows.at(i)->size());
+        Q_ASSERT(m_dataArray->isEmpty()
+                 || m_dataArray->at(0)->size() == rows.at(i)->size());
         m_dataArray->insert(rowIndex++, rows.at(i));
     }
 }
diff --git a/src/datavisualization/engine/bars3drenderer.cpp b/src/datavisualization/engine/bars3drenderer.cpp
index c57339db..c04ef78c 100644
--- a/src/datavisualization/engine/bars3drenderer.cpp
+++ b/src/datavisualization/engine/bars3drenderer.cpp
@@ -2051,10 +2051,14 @@ void Bars3DRenderer::drawLabels(bool drawSelection, const Q3DCamera *activeCamer
 
     glEnable(GL_POLYGON_OFFSET_FILL);
 
+    // If camera x rotation is 180, side labels face wrong direction
+    float activeCameraXRotation = (activeCamera->xRotation() >= 180.0f) ? -180.0f
+                                                                        : activeCamera->xRotation();
+
     float labelAutoAngle = m_axisCacheY.labelAutoRotation();
     float labelAngleFraction = labelAutoAngle / 90.0f;
     float fractionCamY = activeCamera->yRotation() * labelAngleFraction;
-    float fractionCamX = activeCamera->xRotation() * labelAngleFraction;
+    float fractionCamX = activeCameraXRotation * labelAngleFraction;
     float labelsMaxWidth = 0.0f;
 
     int startIndex;
@@ -2168,7 +2172,7 @@ void Bars3DRenderer::drawLabels(bool drawSelection, const Q3DCamera *activeCamer
     labelAutoAngle = m_axisCacheZ.labelAutoRotation();
     labelAngleFraction = labelAutoAngle / 90.0f;
     fractionCamY = activeCamera->yRotation() * labelAngleFraction;
-    fractionCamX = activeCamera->xRotation() * labelAngleFraction;
+    fractionCamX = activeCameraXRotation * labelAngleFraction;
     GLfloat labelYAdjustment = 0.005f;
     GLfloat colPosValue = m_scaleXWithBackground + labelMargin;
     GLfloat rowPosValue = m_scaleZWithBackground + labelMargin;
@@ -2293,7 +2297,7 @@ void Bars3DRenderer::drawLabels(bool drawSelection, const Q3DCamera *activeCamer
     labelAutoAngle = m_axisCacheX.labelAutoRotation();
     labelAngleFraction = labelAutoAngle / 90.0f;
     fractionCamY = activeCamera->yRotation() * labelAngleFraction;
-    fractionCamX = activeCamera->xRotation() * labelAngleFraction;
+    fractionCamX = activeCameraXRotation * labelAngleFraction;
     alignment = (m_xFlipped != m_zFlipped) ? Qt::AlignLeft : Qt::AlignRight;
     if (labelAutoAngle == 0.0f) {
         labelRotation = QVector3D(-90.0f, 90.0f, 0.0f);
diff --git a/src/datavisualization/engine/qabstract3dgraph.cpp b/src/datavisualization/engine/qabstract3dgraph.cpp
index 284ab408..20460bba 100644
--- a/src/datavisualization/engine/qabstract3dgraph.cpp
+++ b/src/datavisualization/engine/qabstract3dgraph.cpp
@@ -656,11 +656,6 @@ qreal QAbstract3DGraph::currentFps() const
  *
  * \brief Whether orthographic projection is used for displaying the graph.
  *
- * If \c {true}, ortographic projection is used to create 2D graphs by replacing
- * the default input handler with one that does not allow rotating the graph and
- * by setting the camera to view the graph
- * directly from the side or from the top. Also, axis labels typically need to be rotated when
- * viewing the graph from the sides.
  * Defaults to \c{false}.
  * \note Shadows will be disabled when set to \c{true}.
  *
diff --git a/src/datavisualization/theme/thememanager.cpp b/src/datavisualization/theme/thememanager.cpp
index 01c7c10b..fb06b11c 100644
--- a/src/datavisualization/theme/thememanager.cpp
+++ b/src/datavisualization/theme/thememanager.cpp
@@ -101,7 +101,8 @@ void ThemeManager::setActiveTheme(Q3DTheme *theme)
     m_activeTheme = theme;
 
     // Reset all bits to dirty for sync
-    m_activeTheme->d_ptr->resetDirtyBits();
+    if (theme->d_ptr->isForcePredefinedType())
+        m_activeTheme->d_ptr->resetDirtyBits();
 
     // Connect signals from new one
     connectThemeSignals();
diff --git a/src/datavisualization/utils/scatterobjectbufferhelper.cpp b/src/datavisualization/utils/scatterobjectbufferhelper.cpp
index 579eff98..b0858149 100644
--- a/src/datavisualization/utils/scatterobjectbufferhelper.cpp
+++ b/src/datavisualization/utils/scatterobjectbufferhelper.cpp
@@ -48,7 +48,6 @@ ScatterObjectBufferHelper::~ScatterObjectBufferHelper()
 
 void ScatterObjectBufferHelper::fullLoad(ScatterSeriesRenderCache *cache, qreal dotScale)
 {
-    m_meshDataLoaded = false;
     m_indexCount = 0;
 
     ObjectHelper *dotObj = cache->object();
@@ -71,6 +70,7 @@ void ScatterObjectBufferHelper::fullLoad(ScatterSeriesRenderCache *cache, qreal
         m_uvbuffer = 0;
         m_normalbuffer = 0;
         m_elementbuffer = 0;
+        m_meshDataLoaded = false;
     }
 
     // Index vertices
diff --git a/src/datavisualization/utils/scatterpointbufferhelper.cpp b/src/datavisualization/utils/scatterpointbufferhelper.cpp
index 860a2b88..9a9eafec 100644
--- a/src/datavisualization/utils/scatterpointbufferhelper.cpp
+++ b/src/datavisualization/utils/scatterpointbufferhelper.cpp
@@ -97,6 +97,7 @@ void ScatterPointBufferHelper::load(ScatterSeriesRenderCache *cache)
         m_bufferedPoints.clear();
         m_pointbuffer = 0;
         m_uvbuffer = 0;
+        m_meshDataLoaded = false;
     }
 
     bool itemsVisible = false;
diff --git a/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp b/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp
index cda6bcce..1516e67d 100644
--- a/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp
+++ b/tests/auto/cpptest/q3dsurface-proxy/tst_proxy.cpp
@@ -47,6 +47,7 @@ private slots:
 
     void initialProperties();
     void initializeProperties();
+    void initialRow();
 
 private:
     QSurfaceDataProxy *m_proxy;
@@ -105,5 +106,14 @@ void tst_proxy::initializeProperties()
     QCOMPARE(m_proxy->rowCount(), 2);
 }
 
+void tst_proxy::initialRow()
+{
+    QSurfaceDataProxy proxy;
+    QSurfaceDataRow row{QSurfaceDataItem{QVector3D{0, 0, 0}},
+                        QSurfaceDataItem{QVector3D{1, 1, 1}}};
+    proxy.addRow(new QSurfaceDataRow(row));
+    proxy.addRow(new QSurfaceDataRow(row));
+}
+
 QTEST_MAIN(tst_proxy)
 #include "tst_proxy.moc"
